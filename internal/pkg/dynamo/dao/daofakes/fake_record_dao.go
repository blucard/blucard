// Code generated by counterfeiter. DO NOT EDIT.
package daofakes

import (
	sync "sync"

	dao "github.com/blucard/blucard/internal/pkg/dynamo/dao"
)

type FakeRecordDao struct {
	GetRecordStub        func(string) (*dao.Record, error)
	getRecordMutex       sync.RWMutex
	getRecordArgsForCall []struct {
		arg1 string
	}
	getRecordReturns struct {
		result1 *dao.Record
		result2 error
	}
	getRecordReturnsOnCall map[int]struct {
		result1 *dao.Record
		result2 error
	}
	SetRecordStub        func(string, string) error
	setRecordMutex       sync.RWMutex
	setRecordArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setRecordReturns struct {
		result1 error
	}
	setRecordReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecordDao) GetRecord(arg1 string) (*dao.Record, error) {
	fake.getRecordMutex.Lock()
	ret, specificReturn := fake.getRecordReturnsOnCall[len(fake.getRecordArgsForCall)]
	fake.getRecordArgsForCall = append(fake.getRecordArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetRecord", []interface{}{arg1})
	fake.getRecordMutex.Unlock()
	if fake.GetRecordStub != nil {
		return fake.GetRecordStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRecordReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRecordDao) GetRecordCallCount() int {
	fake.getRecordMutex.RLock()
	defer fake.getRecordMutex.RUnlock()
	return len(fake.getRecordArgsForCall)
}

func (fake *FakeRecordDao) GetRecordCalls(stub func(string) (*dao.Record, error)) {
	fake.getRecordMutex.Lock()
	defer fake.getRecordMutex.Unlock()
	fake.GetRecordStub = stub
}

func (fake *FakeRecordDao) GetRecordArgsForCall(i int) string {
	fake.getRecordMutex.RLock()
	defer fake.getRecordMutex.RUnlock()
	argsForCall := fake.getRecordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRecordDao) GetRecordReturns(result1 *dao.Record, result2 error) {
	fake.getRecordMutex.Lock()
	defer fake.getRecordMutex.Unlock()
	fake.GetRecordStub = nil
	fake.getRecordReturns = struct {
		result1 *dao.Record
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordDao) GetRecordReturnsOnCall(i int, result1 *dao.Record, result2 error) {
	fake.getRecordMutex.Lock()
	defer fake.getRecordMutex.Unlock()
	fake.GetRecordStub = nil
	if fake.getRecordReturnsOnCall == nil {
		fake.getRecordReturnsOnCall = make(map[int]struct {
			result1 *dao.Record
			result2 error
		})
	}
	fake.getRecordReturnsOnCall[i] = struct {
		result1 *dao.Record
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordDao) SetRecord(arg1 string, arg2 string) error {
	fake.setRecordMutex.Lock()
	ret, specificReturn := fake.setRecordReturnsOnCall[len(fake.setRecordArgsForCall)]
	fake.setRecordArgsForCall = append(fake.setRecordArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("SetRecord", []interface{}{arg1, arg2})
	fake.setRecordMutex.Unlock()
	if fake.SetRecordStub != nil {
		return fake.SetRecordStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setRecordReturns
	return fakeReturns.result1
}

func (fake *FakeRecordDao) SetRecordCallCount() int {
	fake.setRecordMutex.RLock()
	defer fake.setRecordMutex.RUnlock()
	return len(fake.setRecordArgsForCall)
}

func (fake *FakeRecordDao) SetRecordCalls(stub func(string, string) error) {
	fake.setRecordMutex.Lock()
	defer fake.setRecordMutex.Unlock()
	fake.SetRecordStub = stub
}

func (fake *FakeRecordDao) SetRecordArgsForCall(i int) (string, string) {
	fake.setRecordMutex.RLock()
	defer fake.setRecordMutex.RUnlock()
	argsForCall := fake.setRecordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRecordDao) SetRecordReturns(result1 error) {
	fake.setRecordMutex.Lock()
	defer fake.setRecordMutex.Unlock()
	fake.SetRecordStub = nil
	fake.setRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRecordDao) SetRecordReturnsOnCall(i int, result1 error) {
	fake.setRecordMutex.Lock()
	defer fake.setRecordMutex.Unlock()
	fake.SetRecordStub = nil
	if fake.setRecordReturnsOnCall == nil {
		fake.setRecordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRecordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRecordDao) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRecordMutex.RLock()
	defer fake.getRecordMutex.RUnlock()
	fake.setRecordMutex.RLock()
	defer fake.setRecordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRecordDao) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dao.RecordDao = new(FakeRecordDao)
